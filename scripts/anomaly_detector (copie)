#!/usr/bin/env python

#Author: Arturo Cruz Maya 


import roslib; roslib.load_manifest('anomaly_detector')
import rospy
from std_msgs.msg import String
from anomaly_detector.msg import Joint
from anomaly_detector.msg import BodyPart
import qi
import time
import argparse
import sys
import numpy as np
import threading
import random


class AnomalyDetector:
    """
    A class to collect data from the sensors and send it through ROS
    """

    def __init__(self, session):
    	self.memory = session.service("ALMemory")
        self.motion = session.service("ALMotion")
        self.tts = session.service("ALTextToSpeech")
        self.joints=[]
        self.imu={}
        self.n_sample = 0 
        self.pub_joint = rospy.Publisher('/anomaly', BodyPart, queue_size=1)
        self.sub_collision = rospy.Subscriber('/collision', String, self.callback_collision)
        self.time_init = time.time()
        self.n_times = 0
        self.run()
        

    def callback_collision(self, data):
        if (time.time() - self.time_init) > 2:
            phrases = ["ow", "again", "oh yes","I love it", "Do it again"]
            self.time_init = time.time()
            if self.n_times>0 and self.n_times<2:
                self.n_times=self.n_times+1
            else:
                self.n_times=0
            choice = random.choice(phrases)
            self.tts.say(choice)
            

                
            

    def getData(self):
             
        BPart = BodyPart()
        self.n_sample = self.n_sample + 1
        print(self.n_sample)
        for part in self.joints:                
            PositionActuator =  self.memory.getData("Device/SubDeviceList/"+part+"/Position/Actuator/Value")
            PositionSensor =  self.memory.getData("Device/SubDeviceList/"+part+"/Position/Sensor/Value")
            joint = Joint()       
            joint.commanded_position = float(PositionActuator)
            joint.sensed_position = float(PositionSensor) 
            joint.name = part
            joint.sample = str(self.n_sample)
            
            BPart.BodyPart.append(joint)
            #print(part)
        
        self.pub_joint.publish(BPart)        
        return True 

    def getDataIMU(self, sensor):
        X =  self.memory.getData("Device/SubDeviceList/InertialSensorBase/"+sensor+"X/Sensor/Value")
        Y =  self.memory.getData("Device/SubDeviceList/InertialSensorBase/"+sensor+"Y/Sensor/Value")
        Z =  self.memory.getData("Device/SubDeviceList/InertialSensorBase/"+sensor+"Z/Sensor/Value")
         
        self.imu[sensor][0].append(round(X,6))
        self.imu[sensor][1].append(round(Y,6))	
        self.imu[sensor][2].append(round(Z,6))

        #print "####################"
        return True 

    def save_txt(self, joint):

        np.savetxt("txt/"+joint+".txt", np.transpose(self.joints[joint]), fmt='%f', delimiter='  ', newline='\n', header='', footer='', comments='# ', encoding=None)

			
    def run(self):
        """
        Loop on, wait for events until manual interruption.
        """
        print "Starting Collecting Data (sensors)"
        try:
            joints = []
            sensors = []   	
            #Head
            joints.append('HeadPitch')   
            joints.append('HeadYaw')
            joints.append('HipPitch')
            joints.append('HipRoll')
            joints.append('KneePitch')
            joints.append('LElbowRoll')
            joints.append('LElbowYaw')
            joints.append('LHand')
            joints.append('LShoulderPitch')
            joints.append('LShoulderRoll')
            joints.append('RElbowRoll')
            joints.append('RElbowYaw')
            joints.append('RHand')
            joints.append('RShoulderPitch')
            joints.append('RShoulderRoll')

            self.joints = joints
            ''' 
            #IMU	
            sensors.append('Gyroscope')
            sensors.append('Angle')	
            sensors.append('Accelerometer')
            '''
        	
           
            
            
            while True:
                time.sleep(0.8) 
                self.getData()
                #for sensor in sensors:
                #    self.getDataIMU(sensor)
                #self.publisher.publish(str(n))
                
            print "Finished"
        except KeyboardInterrupt:
            print "Interrupted by user, stopping Collecting Data"
           
            sys.exit(0)


def main():
    rospy.init_node('anomaly_detector')
    
    app = qi.Application(url="tcp://10.0.204.166:9559")
    app.start()
    session = app.session
    anomaly_detector = AnomalyDetector(session)

    session.registerService('AnomalyDetector', anomaly_detector)
    
    app.run()
 
    	

if __name__ == '__main__':
    main()
